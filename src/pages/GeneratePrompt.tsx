import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { toast } from "sonner";
import { ArrowLeft, Loader2, Sparkles, CheckCircle, FileText, Download, Key, Info, Upload, BarChart3, AlertTriangle } from "lucide-react";
import { useAuth } from '@/contexts/AuthContext';
import { AuthModal } from '@/components/auth/AuthModal';
import { useUsageTracking } from '@/hooks/useUsageTracking';

const GeneratePrompt = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { usage, incrementUsage, isAuthenticated, remainingAttempts } = useUsageTracking();
  const [isGenerating, setIsGenerating] = useState(false);
  const [industry, setIndustry] = useState("finance");
  const [usecase, setUsecase] = useState("report generation");
  const [promptDescription, setPromptDescription] = useState("");
  const [generatedResult, setGeneratedResult] = useState<any>(null);
  const [selectedCompany, setSelectedCompany] = useState("openai");
  const [selectedModel, setSelectedModel] = useState("gpt-5-mini-2025-08-07");
  const [reasoningEffort, setReasoningEffort] = useState("medium");
  const [hasUsedFreeTrial, setHasUsedFreeTrial] = useState(false);
  const [showAuthPrompt, setShowAuthPrompt] = useState(false);
  const [showPlanning, setShowPlanning] = useState(false);
  const [showConsiderations, setShowConsiderations] = useState(false);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [documentContent, setDocumentContent] = useState("");

  // Listen for custom events to show auth modal
  useEffect(() => {
    const handleShowAuthModal = () => {
      setShowAuthPrompt(true);
    };

    window.addEventListener('show-auth-modal', handleShowAuthModal);
    return () => {
      window.removeEventListener('show-auth-modal', handleShowAuthModal);
    };
  }, []);

  // Model configurations
  const modelOptions = {
    openai: [
      { id: "gpt-5-mini-2025-08-07", name: "GPT-5", description: "Latest" },
      { id: "gpt-4.1", name: "GPT-4.1", description: "" }
    ]
  };

  // Update selected model when company changes
  const handleCompanyChange = (company: string) => {
    setSelectedCompany(company);
    setSelectedModel(modelOptions[company as keyof typeof modelOptions][0].id);
  };

  // Handle file upload
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setUploadedFile(file);
      // Read file content
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setDocumentContent(content);
      };
      reader.readAsText(file);
    }
  };

  // Analyze document to extract industry and use case
  const analyzeDocument = async () => {
    if (!documentContent) {
      toast.error('Please upload a document first');
      return;
    }

    setIsAnalyzing(true);
    try {
      const response = await fetch('http://localhost:5001/api/analyze-document', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          document_content: documentContent,
          reasoning_effort: reasoningEffort
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setIndustry(result.industry);
        setUsecase(result.usecase);
        toast.success('Document analyzed! Industry and use case have been auto-filled.');
      } else {
        toast.error(`Analysis failed: ${result.error}`);
      }
    } catch (error) {
      console.error('Analysis error:', error);
      toast.error('Error analyzing document. Please try again.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Utility function to download content as markdown
  const downloadAsMarkdown = (content: string, filename: string) => {
    const markdownContent = `# Generated Prompt

${content}

---
*Generated by Propt - ${new Date().toLocaleDateString()}*
`;
    
    const blob = new Blob([markdownContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${filename}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('Prompt downloaded as Markdown file');
  };

  const handleGenerate = async () => {
    if (!promptDescription.trim()) {
      toast.error('Please describe what your prompt should be about');
      return;
    }

    // Check usage limits for non-authenticated users
    if (!isAuthenticated && !usage.canGenerate) {
      toast.error('Free limit reached! Sign up to continue generating prompts.');
      setShowAuthPrompt(true);
      return;
    }

    // For non-authenticated users, check if they can make another attempt
    if (!isAuthenticated && !incrementUsage()) {
      setShowAuthPrompt(true);
      return;
    }

    setIsGenerating(true);
    setGeneratedResult(null);

    try {
      const response = await fetch('http://localhost:5001/api/generate-prompt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          industry: industry,
          use_case: usecase,
          context: promptDescription,
          model_provider: selectedCompany,
          model: selectedModel,
          reasoning_effort: reasoningEffort
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      setGeneratedResult(result);
      
      if (result.success) {
        toast.success('Prompt generated successfully!');
      } else {
        toast.error(`Generation failed: ${result.error}`);
      }
    } catch (error) {
      console.error('Generation error:', error);
      toast.error(`Error generating prompt: ${error instanceof Error ? error.message : 'Unknown error'}`);
      setGeneratedResult({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center gap-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => navigate('/')}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              Back to Home
            </Button>
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-br from-blue-900 to-orange-500 rounded-lg flex items-center justify-center">
                <Sparkles className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-semibold text-foreground">Generate New Prompt</h1>
                <p className="text-sm text-muted-foreground">Create a custom prompt with AI assistance</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Authentication & Instructions */}
      <div className="container mx-auto px-6 py-4 max-w-4xl">
        {/* Free Trial Status for Non-Signed Users - HIDDEN for creator */}
        {false && !user && (
          <Alert className="mb-4 border-blue-200 bg-blue-50">
            <Info className="h-4 w-4" />
            <AlertDescription>
              {!hasUsedFreeTrial ? (
                <div className="space-y-2">
                  <div className="font-medium">🎉 Free Trial Available!</div>
                  <div>You can generate one prompt for free. After that, please sign up to continue or enter your own API keys in Settings.</div>
                </div>
              ) : (
                <div className="space-y-2">
                  <div className="font-medium">Free Trial Used</div>
                  <div>
                    To continue generating prompts, please{' '}
                    <Button variant="link" className="p-0 h-auto font-medium" onClick={() => setShowAuthPrompt(true)}>
                      sign up for an account
                    </Button>
                    {' '}or go to{' '}
                    <Button variant="link" className="p-0 h-auto font-medium" onClick={() => navigate('/settings')}>
                      Settings
                    </Button>
                    {' '}to enter your own API keys.
                  </div>
                </div>
              )}
            </AlertDescription>
          </Alert>
        )}

        {/* API Key Instructions - HIDDEN for creator */}
        {false && (
          <Alert className="mb-4 border-amber-200 bg-amber-50">
            <Key className="h-4 w-4" />
            <AlertDescription>
              <div className="space-y-2">
                <div className="font-medium">💡 Using Your Own API Keys</div>
                <div>
                  For unlimited generations, you can use your own OpenAI API keys. 
                  Go to{' '}
                  <Button variant="link" className="p-0 h-auto font-medium" onClick={() => navigate('/settings')}>
                    Settings → API Keys
                  </Button>
                  {' '}to configure them.
                </div>
              </div>
            </AlertDescription>
          </Alert>
        )}
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-6 py-8 max-w-4xl">
        <div className="space-y-8">
          
          {/* Usage Indicator for Non-Authenticated Users */}
          {!isAuthenticated && (
            <Alert className={usage.hasReachedLimit ? "border-red-200 bg-red-50" : "border-blue-200 bg-blue-50"}>
              <AlertTriangle className={`h-4 w-4 ${usage.hasReachedLimit ? "text-red-600" : "text-blue-600"}`} />
              <AlertDescription className={usage.hasReachedLimit ? "text-red-800" : "text-blue-800"}>
                {usage.hasReachedLimit ? (
                  <span>
                    <strong>Free limit reached!</strong> You've used your free prompt generation. 
                    <Button 
                      variant="link" 
                      className="h-auto p-0 ml-1 text-red-700 underline"
                      onClick={() => setShowAuthPrompt(true)}
                    >
                      Sign up for unlimited access
                    </Button>
                  </span>
                ) : (
                  <span>
                    <strong>{remainingAttempts} free attempt remaining.</strong> 
                    <Button 
                      variant="link" 
                      className="h-auto p-0 ml-1 text-blue-700 underline"
                      onClick={() => setShowAuthPrompt(true)}
                    >
                      Sign up for unlimited access
                    </Button>
                  </span>
                )}
              </AlertDescription>
            </Alert>
          )}

          {/* Configuration Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="w-5 h-5 text-blue-600" />
                Prompt Configuration
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              
              {/* Foundational Model Selection */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground">Model to be Pro(m)pted</h3>
                
                {/* Model Provider Selection */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Model Provider</Label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      type="button"
                      onClick={() => handleCompanyChange("openai")}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        selectedCompany === "openai"
                          ? "border-blue-500 bg-blue-50 text-blue-900"
                          : "border-gray-200 hover:border-gray-300"
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-black rounded flex items-center justify-center">
                          <span className="text-white text-xs font-bold">AI</span>
                        </div>
                        <div className="text-left">
                          <div className="font-semibold">OpenAI</div>
                          <div className="text-xs text-muted-foreground">GPT Models</div>
                        </div>
                      </div>
                    </button>

                  </div>
                </div>

                {/* Model Selection */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Model</Label>
                  <select
                    value={selectedModel}
                    onChange={(e) => setSelectedModel(e.target.value)}
                    className="w-full p-3 border border-border rounded-md bg-background focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {modelOptions[selectedCompany as keyof typeof modelOptions].map((model) => (
                      <option key={model.id} value={model.id}>
                        {model.name} - {model.description}
                      </option>
                    ))}
                  </select>
                </div>
                
                {/* Only show reasoning effort for GPT-5 models */}
                {selectedModel !== "gpt-4.1" && (
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Reasoning Effort</Label>
                    <div className="space-y-3">
                      <div className="relative">
                        <input
                          type="range"
                          min="0"
                          max="2"
                          step="1"
                          value={reasoningEffort === "low" ? 0 : reasoningEffort === "medium" ? 1 : 2}
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            setReasoningEffort(value === 0 ? "low" : value === 1 ? "medium" : "high");
                          }}
                          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                        />
                        <div className="flex justify-between text-xs text-muted-foreground mt-1">
                          <span>Low</span>
                          <span>Medium</span>
                          <span>High</span>
                        </div>
                      </div>
                      <div className="text-center">
                        <span className="text-sm font-medium capitalize bg-blue-100 px-3 py-1 rounded-full">
                          {reasoningEffort} - {reasoningEffort === "low" ? "Fast" : reasoningEffort === "medium" ? "Balanced" : "Deep reasoning"}
                        </span>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* Document Upload and Analysis */}
              <div className="space-y-4 border-2 border-dashed border-gray-300 rounded-lg p-6 bg-gray-50">
                <div className="text-center">
                  <Upload className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                  <h3 className="text-lg font-semibold text-gray-700 mb-2">Document Analysis (Optional)</h3>
                  <p className="text-sm text-gray-600 mb-4">
                    Upload a document to automatically analyze and fill industry & use case fields
                  </p>
                </div>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-center">
                    <label htmlFor="document-upload" className="cursor-pointer">
                      <div className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        <Upload className="w-4 h-4" />
                        Choose Document
                      </div>
                      <input
                        id="document-upload"
                        type="file"
                        accept=".txt,.md,.doc,.docx,.pdf"
                        onChange={handleFileUpload}
                        className="hidden"
                      />
                    </label>
                  </div>
                  
                  {uploadedFile && (
                    <div className="text-center space-y-2">
                      <p className="text-sm text-green-600">
                        📄 {uploadedFile.name} uploaded
                      </p>
                      <Button
                        onClick={analyzeDocument}
                        disabled={isAnalyzing}
                        className="bg-green-600 hover:bg-green-700"
                        size="sm"
                      >
                        {isAnalyzing ? (
                          <>
                            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                            Analyzing...
                          </>
                        ) : (
                          <>
                            <BarChart3 className="w-4 h-4 mr-2" />
                            Analyze & Auto-fill
                          </>
                        )}
                      </Button>
                    </div>
                  )}
                </div>
              </div>

              {/* Industry and Use Case */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="industry" className="text-sm font-medium">Industry</Label>
                  <Input
                    id="industry"
                    value={industry}
                    onChange={(e) => setIndustry(e.target.value)}
                    placeholder="e.g., finance, healthcare, education"
                    className="w-full"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="usecase" className="text-sm font-medium">Use Case</Label>
                  <Input
                    id="usecase"
                    value={usecase}
                    onChange={(e) => setUsecase(e.target.value)}
                    placeholder="e.g., report generation, customer service"
                    className="w-full"
                  />
                </div>
              </div>

              {/* Prompt Description */}
              <div className="space-y-2">
                <Label htmlFor="description" className="text-sm font-medium">
                  What should this prompt be about?
                </Label>
                <Textarea
                  id="description"
                  value={promptDescription}
                  onChange={(e) => setPromptDescription(e.target.value)}
                  placeholder="Describe what you want the prompt to do. For example: 'Create a prompt that helps generate financial reports with key metrics and insights for quarterly reviews'"
                  className="min-h-[120px] resize-none"
                />
                <p className="text-xs text-muted-foreground">
                  Be specific about the task, desired output format, and any special requirements.
                </p>
              </div>

              {/* API Key Notice */}
              {!user && (
                <Alert className="border-amber-200 bg-amber-50">
                  <Key className="h-4 w-4 text-amber-600" />
                  <AlertDescription className="text-amber-800">
                    <strong>Pro Tip:</strong> For unlimited access and better performance, 
                    <Button 
                      variant="link" 
                      className="h-auto p-0 ml-1 text-amber-700 underline"
                      onClick={() => setShowAuthPrompt(true)}
                    >
                      sign up and add your OpenAI API key
                    </Button>
                    {' '}in Settings. This gives you direct access to GPT models without limits.
                  </AlertDescription>
                </Alert>
              )}

              {/* Generate Button */}
              <Button 
                onClick={handleGenerate}
                disabled={isGenerating || !promptDescription.trim() || (!isAuthenticated && usage.hasReachedLimit)}
                className={`w-full ${(!isAuthenticated && usage.hasReachedLimit) ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
                size="lg"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Generating with {modelOptions[selectedCompany as keyof typeof modelOptions].find(m => m.id === selectedModel)?.name}...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    {(!isAuthenticated && usage.hasReachedLimit) 
                      ? 'Sign Up to Continue' 
                      : !isAuthenticated 
                        ? `Generate Prompt (${remainingAttempts} free remaining)`
                        : 'Generate Prompt'
                    }
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Results Section */}
          {generatedResult && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  {generatedResult.success ? (
                    <>
                      <CheckCircle className="w-5 h-5 text-green-600" />
                      <span className="text-green-800">Generated Prompt</span>
                    </>
                  ) : (
                    <span className="text-red-800">Generation Failed</span>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {generatedResult.success ? (
                  <div className="space-y-6">
                    {/* Show structured sections if available */}
                    {generatedResult.final_prompt ? (
                      <>
                        {/* 1. Final System Prompt */}
                        <div className="space-y-2">
                          <Label className="text-lg font-semibold text-green-800 flex items-center gap-2">
                            🎯 Final System Prompt
                          </Label>
                          <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                            <pre className="whitespace-pre-wrap text-sm font-mono max-h-96 overflow-y-auto">
                              {generatedResult.final_prompt}
                            </pre>
                          </div>
                          <div className="flex gap-2 flex-wrap">
                            <Button 
                              onClick={() => navigator.clipboard.writeText(generatedResult.final_prompt)}
                              variant="outline"
                              size="sm"
                            >
                              Copy Prompt
                            </Button>
                            <Button 
                              onClick={() => downloadAsMarkdown(
                                generatedResult.final_prompt, 
                                `generated-prompt-${industry}-${new Date().getTime()}`
                              )}
                              variant="outline"
                              size="sm"
                              className="flex items-center gap-2"
                            >
                              <Download className="w-4 h-4" />
                              Download .md
                            </Button>
                            <Button 
                              onClick={() => navigate('/', { state: { promptToRefine: generatedResult.final_prompt } })}
                              className="bg-orange-600 hover:bg-orange-700"
                              size="sm"
                            >
                              Refine This Prompt
                            </Button>
                            {generatedResult.planning && (
                              <Button 
                                onClick={() => setShowPlanning(!showPlanning)}
                                variant="outline"
                                size="sm"
                                className="flex items-center gap-2"
                              >
                                <FileText className="w-4 h-4" />
                                {showPlanning ? 'Hide' : 'Show'} Planning Steps
                              </Button>
                            )}
                            {generatedResult.considerations && (
                              <Button 
                                onClick={() => setShowConsiderations(!showConsiderations)}
                                variant="outline"
                                size="sm"
                                className="flex items-center gap-2"
                              >
                                <FileText className="w-4 h-4" />
                                {showConsiderations ? 'Hide' : 'Show'} Further Steps
                              </Button>
                            )}
                          </div>
                        </div>

                        {/* Planning Steps Section - Collapsible */}
                        {showPlanning && generatedResult.planning && (
                          <div className="space-y-2">
                            <Label className="text-lg font-semibold text-blue-800 flex items-center gap-2">
                              📋 Planning Steps
                            </Label>
                            <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                              <pre className="whitespace-pre-wrap text-sm max-h-64 overflow-y-auto">
                                {generatedResult.planning}
                              </pre>
                            </div>
                          </div>
                        )}

                        {/* Further Considerations Section - Collapsible */}
                        {showConsiderations && generatedResult.considerations && (
                          <div className="space-y-2">
                            <Label className="text-lg font-semibold text-purple-800 flex items-center gap-2">
                              ⚙️ Further Considerations
                            </Label>
                            <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                              <pre className="whitespace-pre-wrap text-sm max-h-64 overflow-y-auto">
                                {generatedResult.considerations}
                              </pre>
                            </div>
                          </div>
                        )}


                      </>
                    ) : (
                      /* Fallback for unstructured response */
                      <div className="space-y-2">
                        <Label className="text-sm font-medium text-green-800">Generated Prompt:</Label>
                        <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                          <pre className="whitespace-pre-wrap text-sm font-mono max-h-96 overflow-y-auto">
                            {generatedResult.generated_prompt}
                          </pre>
                        </div>
                        <div className="flex gap-2">
                          <Button 
                            onClick={() => navigator.clipboard.writeText(generatedResult.generated_prompt)}
                            variant="outline"
                            size="sm"
                          >
                            Copy Prompt
                          </Button>
                          <Button 
                            onClick={() => downloadAsMarkdown(
                              generatedResult.generated_prompt, 
                              `generated-prompt-${industry}-${new Date().getTime()}`
                            )}
                            variant="outline"
                            size="sm"
                            className="flex items-center gap-2"
                          >
                            <Download className="w-4 h-4" />
                            Download .md
                          </Button>
                          <Button 
                            onClick={() => navigate('/', { state: { promptToRefine: generatedResult.generated_prompt } })}
                            className="bg-orange-600 hover:bg-orange-700"
                            size="sm"
                          >
                            Refine This Prompt
                          </Button>
                        </div>
                      </div>
                    )}
                    
                    {/* Metadata */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm pt-4 border-t">
                      <div className="flex flex-col">
                        <span className="font-medium text-muted-foreground">Industry</span>
                        <span className="text-foreground">{generatedResult.industry}</span>
                      </div>
                      <div className="flex flex-col">
                        <span className="font-medium text-muted-foreground">Use Case</span>
                        <span className="text-foreground">{generatedResult.usecase}</span>
                      </div>
                      <div className="flex flex-col">
                        <span className="font-medium text-muted-foreground">Model Used</span>
                        <span className="text-foreground">
                          {modelOptions[selectedCompany as keyof typeof modelOptions].find(m => m.id === selectedModel)?.name || selectedModel}
                        </span>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                    <p className="text-red-800 text-sm">
                      <strong>Error:</strong> {generatedResult.error}
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </div>

      {/* Authentication Modal */}
      <AuthModal 
        isOpen={showAuthPrompt} 
        onClose={() => setShowAuthPrompt(false)} 
      />
    </div>
  );
};

export default GeneratePrompt;
